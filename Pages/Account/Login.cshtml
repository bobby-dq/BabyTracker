@page
@model LoginModel

<div class="container px-5 py-24 mx-auto flex">
    <div class="bg-green-50 rounded-lg p-8 flex flex-col md:ml-auto w-full mt-10 md:mt-0 relative z-10 shadow-md">
        <div class="text-red-700" asp-validation-summary="All"></div>
        <h2 class="text-gray-900 text-lg mb-1 font-medium title-font">Login</h2>
        <form method="post">
            <input type="hidden" name="returnUrl"  value="@Model.ReturnUrl"/>
            <div class="relative mb-4">
                <label for="username" class="leading-7 text-sm text-gray-600">Username</label>
                <input id="username" asp-for="UserName" class="w-full bg-white rounded border border-gray-300 focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out">
            </div>
            <div class="relative mb-4">
                <label for="password" class="leading-7 text-sm text-gray-600">Password</label>
                <input id="password" type="password" asp-for="Password" class="w-full bg-white rounded border border-gray-300 focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out">
            </div>
            <button class="text-white bg-green-500 border-0 py-2 px-6 focus:outline-none hover:bg-green-600 rounded text-lg">Log In</button>
        </form>
    </div>
</div>

@functions {
    public class LoginModel: AccountPageModel
    {
        private SignInManager<IdentityUser> signInManager;
        public LoginModel (SignInManager<IdentityUser> signInManager)
        {
            this.signInManager = signInManager;
        }

        [BindProperty][Required]
        public string UserName { get; set; }
        [BindProperty][Required]
        public string Password { get; set; }
        [BindProperty(SupportsGet=true)]
        public string ReturnUrl { get; set; }
        public async Task<IActionResult> OnPostAsync()
        {
            if (ModelState.IsValid)
            {
                Microsoft.AspNetCore.Identity.SignInResult result = await signInManager.PasswordSignInAsync(UserName, Password, false, false);
                if (result.Succeeded)
                {
                    return Redirect(ReturnUrl ?? "/");
                }
                ModelState.AddModelError("", "Invalid username or password");
            }
            return Page();
        }

    }
}