@page "{id}"
@model EditModel
<div class="container px-5 py-24 mx-auto flex">
    <div class="bg-yellow-50 rounded-lg p-8 flex flex-col md:ml-auto w-full mt-10 md:mt-0 relative z-10 shadow-md">
        <div class="text-red-700" asp-validation-summary="All"></div>
        <h2 class="text-gray-900 text-lg mb-1 font-medium title-font">@Model.Message</h2>
        <form method="post">
            <input name="Id" type="hidden" value="@Model.Id" disabled/>
            <div class="relative mb-4">
                <label for="username" class="leading-7 text-sm text-gray-600">Username</label>
                <input id="username" name="UserName" value="@Model.UserName" class="w-full bg-white rounded border border-gray-300 focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out">
            </div>
            <div class="relative mb-4">
                <label for="email" class="leading-7 text-sm text-gray-600">Email</label>
                <input type="email" id="email" name="Email" value="@Model.Email" class="w-full bg-white rounded border border-gray-300 focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out">
            </div>
            <div class="relative mb-4">
                <label for="password" class="leading-7 text-sm text-gray-600">Password</label>
                <input type="password" id="password" name="Password" value="@Model.Password" class="w-full bg-white rounded border border-gray-300 focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out">
            </div>
            <div>
                <button type="submit" class="text-white bg-yellow-500 border-0 py-2 px-6 focus:outline-none hover:bg-yellow-600 rounded text-lg">Edit</button>
                @if (User.IsInRole("Administrator"))
                {
                    <a asp-page="/Users/List" class="text-white bg-green-500 border-0 py-2 px-6 focus:outline-none hover:bg-green-600 rounded text-lg">Back</a>
                }
                else
                {
                    <a asp-action="Index" asp-controller="Infant" class="text-white bg-green-500 border-0 py-2 px-6 focus:outline-none hover:bg-green-600 rounded text-lg">Back</a>
                }
                <a asp-page="/Users/Delete" asp-route-id="@Model.Id" class="text-white bg-red-500 border-0 py-2 px-6 focus:outline-none hover:bg-red-600 rounded text-lg">Delete</a>
            </div>
            
        </form>
        <div>
            
        </div>
        
    </div>
    
</div>

@functions{
    public class EditModel: AccountPageModel
    {
        private bool IsLoggedIn() => User.Identity.IsAuthenticated;
        private bool IsUserOwner(string id) => UserManager.GetUserId(User) == id;
        private bool IsAdmin() => User.IsInRole("Administrator");

        public UserManager<IdentityUser> UserManager;
        public EditModel(UserManager<IdentityUser> userManger)
        {
            UserManager = userManger;
        }

        [BindProperty][Required]
        public string Id { get; set; }
        [BindProperty][Required]
        public string UserName { get; set; }
        [BindProperty][Required][EmailAddress]
        public string Email { get; set; }
        [BindProperty]
        public string Password { get; set; }
        public string Message {get; set;}
        public string ReturnPath {get; set;}

        public async Task<IActionResult> OnGetAsync(string id)
        {
            if (!IsLoggedIn())
            {
                return RedirectToPage("/Account/Login");
            }
            if (IsUserOwner(id) || IsAdmin())
            {
                IdentityUser user = await UserManager.FindByIdAsync(id);
                Id = user.Id;
                UserName = user.UserName;
                Email = user.Email;
                Message = IsAdmin() ? $"Edit {UserName} account" : "Edit your account";
                ReturnPath = IsAdmin() ? "/Users/List" :"/Infant/Index";
                return Page();
            }
            return RedirectToPage("/Error/Error404");
        }
        
        public async Task<IActionResult> OnPostAsync()
        {
            if (!IsLoggedIn())
            {
                return RedirectToPage("/Account/Login");
            }
            if (IsUserOwner(Id) || IsAdmin())
            {
                if (ModelState.IsValid)
                {
                    IdentityUser user = await UserManager.FindByIdAsync(Id);
                    user.UserName = UserName;
                    user.Email = Email;
                    IdentityResult result = await UserManager.UpdateAsync(user);

                    if (result.Succeeded && !String.IsNullOrEmpty(Password))
                    {
                        await UserManager.RemovePasswordAsync(user);
                        result = await UserManager.AddPasswordAsync(user, Password);
                    }
                    if (result.Succeeded)
                    {
                        return IsAdmin() ? RedirectToPage("/Users/List"): RedirectToAction("Index", "Infant");
                    }
                    foreach (IdentityError err in result.Errors)
                    {
                        ModelState.AddModelError("", err.Description);
                    }
                }
                return Page();
            }
            return RedirectToPage("/Error/Error404");
        }
    }
}