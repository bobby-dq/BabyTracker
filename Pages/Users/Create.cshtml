@page
@model CreateModel
<div class="container px-5 py-24 mx-auto flex">
    <div class="bg-green-50 rounded-lg p-8 flex flex-col md:ml-auto w-full mt-10 md:mt-0 relative z-10 shadow-md">
        <div class="text-red-700" asp-validation-summary="All"></div>
        <h2 class="text-gray-900 text-lg mb-1 font-medium title-font">@Model.Message</h2>
        <form method="post">
            <div class="relative mb-4">
                <label for="username" class="leading-7 text-sm text-gray-600">Username</label>
                <input id="username" name="UserName" value="@Model.UserName" class="w-full bg-white rounded border border-gray-300 focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out">
            </div>
            <div class="relative mb-4">
                <label for="email" class="leading-7 text-sm text-gray-600">Email</label>
                <input type="email" id="email" name="Email" value="@Model.Email" class="w-full bg-white rounded border border-gray-300 focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out">
            </div>
            <div class="relative mb-4">
                <label for="password" class="leading-7 text-sm text-gray-600">Password</label>
                <input type="password" id="password" name="Password" value="@Model.Password" class="w-full bg-white rounded border border-gray-300 focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out">
            </div>
            <button type="submit" class="text-white bg-green-500 border-0 py-2 px-6 focus:outline-none hover:bg-green-600 rounded text-lg">Create</button>
        </form>
        <a asp-page="@Model.ReturnPath"><button class="text-green-500 bg-green-100 border-0 my-2 py-1 px-8 focus:outline-none hover:bg-green-50 rounded text-lg">Back</button></a>
    </div>
</div>

@functions {
    public class CreateModel: AccountPageModel
    {
        public UserManager<IdentityUser> UserManager;
        public SignInManager<IdentityUser> SignInManager;
        public CreateModel(UserManager<IdentityUser> userManager, SignInManager<IdentityUser> signInManager)
        {
            UserManager = userManager;
            SignInManager = signInManager;
        }
        [BindProperty][Required]
        public string UserName {get;set;}
        [BindProperty][Required][EmailAddress]
        public string Email {get; set;}
        [BindProperty][Required]
        public string Password {get; set;}
        public string Message {get; set;}
        public string ReturnPath {get; set;}
        public IActionResult OnGet()
        {
            ReturnPath = "/";
            if(User.IsInRole("Administrator"))
            {
                ReturnPath = "/Users/List";
                Message = "Create a new user";
                return Page();
            }
            if (User.Identity.IsAuthenticated)
            {
                Message = "Create an account with us!";
                return RedirectToPage("/Account/Logout");
            }
            return Page();
        }

        public async Task<IActionResult> OnPostAsync()
        {
            if (ModelState.IsValid)
            {
                IdentityUser user = new IdentityUser
                {
                    UserName= UserName,
                    Email = Email
                };
                IdentityResult result = await UserManager.CreateAsync(user, Password);
                if (result.Succeeded)
                {
                    if (User.IsInRole("Administrator"))
                    {
                        return RedirectToPage("List");
                    }
                    else
                    {
                        Microsoft.AspNetCore.Identity.SignInResult resultSignIn = await SignInManager.PasswordSignInAsync(UserName, Password, false, false);
                        return Redirect("/");
                    }
                }
                foreach (IdentityError err in result.Errors)
                {
                    ModelState.AddModelError("", err.Description);
                }
            }
            return Page();
        }
    }
}