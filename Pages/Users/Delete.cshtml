@page "{id}"
@model EditModel
@{
    Layout="_UserLayout";
}

<h5 class="bg-danger text-white text-center p-2">Delete User</h5>
<form method="post">
    <div asp-validation-summary="All" class="text-danger"></div>
    <div class="form-group">
        <label>ID</label>
        <input name="Id" class="form-control" value="@Model.Id" disabled/>
        <input name="Id" type="hidden" value="@Model.Id"/>
    </div>
    <div class="form-group">
        <label>User Name</label>
        <input name="UserName" class="form-control" value="@Model.UserName" disabled/>
    </div>
    <div class="form-group">
        <label>Email</label>
        <input name="Email" class="form-control" value="@Model.Email" disabled/>
    </div>
    <div class="form-group">
        <label>Password</label>
        <input type="password" name="Password" class="form-control" value="@Model.Password" disabled/>
    </div>
    <button type="submit" class="btn btn-danger">Delete</button>
    <a class="btn btn-secondary" asp-page="List">Back</a>
</form>


@functions{
    public class EditModel: AccountPageModel
    {
        
        private bool IsLoggedIn() => User.Identity.IsAuthenticated;
        private bool IsUserOwner(string id) => UserManager.GetUserId(User) == id;
        public UserManager<IdentityUser> UserManager;
        public EditModel(UserManager<IdentityUser> userManger)
        {
            UserManager = userManger;
        }

        [BindProperty][Required]
        public string Id { get; set; }
        [BindProperty][Required]
        public string UserName { get; set; }
        [BindProperty][Required][EmailAddress]
        public string Email { get; set; }
        [BindProperty]
        public string Password { get; set; }

        public async Task<IActionResult> OnGetAsync(string id)
        {
            if (!IsLoggedIn())
            {
                return RedirectToPage("/Account/Login");
            }
            if (!IsUserOwner(id))
            {
                return RedirectToPage("/Error/Error404");
            }
            IdentityUser user = await UserManager.FindByIdAsync(id);
            Id = user.Id;
            UserName = user.UserName;
            Email = user.Email;
            return Page();
        }
        
        public async Task<IActionResult> OnPostAsync()
        {
            if (!IsLoggedIn())
            {
                return RedirectToPage("/Account/Login");
            }
            if (!IsUserOwner(Id))
            {
                return RedirectToPage("/Error/Error404");
            }
            IdentityUser user = await UserManager.FindByIdAsync(Id);
            if (user != null)
            {
                await UserManager.DeleteAsync(user);
                return RedirectToPage("List");
            }
            return RedirectToPage("List");
        }
    }
}