@page "{id}"
@model EditModel
<div class="container px-5 py-24 mx-auto flex">
    <div class="bg-yellow-50 rounded-lg p-8 flex flex-col md:ml-auto w-full mt-10 md:mt-0 relative z-10 shadow-md">
        <div class="text-red-700" asp-validation-summary="All"></div>
        <h2 class="text-gray-900 text-lg mb-1 font-medium title-font">@Model.Message</h2>
        <form method="post">
            <input name="Id" type="hidden" value="@Model.Id" disabled/>
            <div class="relative mb-4">
                <label for="username" class="leading-7 text-sm text-gray-600">Username</label>
                <input disabled id="username" name="UserName" value="@Model.UserName" class="w-full bg-white rounded border border-gray-300 focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out">
            </div>
            <div class="relative mb-4">
                <label for="email" class="leading-7 text-sm text-gray-600">Email</label>
                <input disabled type="email" id="email" name="Email" value="@Model.Email" class="w-full bg-white rounded border border-gray-300 focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out">
            </div>
            <div class="relative mb-4">
                <label for="password" class="leading-7 text-sm text-gray-600">Password</label>
                <input disabled type="password" id="password" name="Password" value="@Model.Password" class="w-full bg-white rounded border border-gray-300 focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out">
            </div>
            <div>
                <button type="submit" class="text-white bg-red-500 border-0 py-2 px-6 focus:outline-none hover:bg-red-600 rounded text-lg">Delete</button>
                <a asp-page="@Model.ReturnPath" class="text-center text-green-500 mx-2 focus:outline-none hover:text-green-600 rounded">Back</a>
            </div>
        </form>
        
    </div>
</div>


@functions{
    public class EditModel: AccountPageModel
    {
        
        private bool IsLoggedIn() => User.Identity.IsAuthenticated;
        private bool IsUserOwner(string id) => UserManager.GetUserId(User) == id;
        private bool IsUserAdmin() => User.IsInRole("Administrator");
        private string GetReturnUrl()
        {
            return IsUserAdmin() ? "List": "/";
        }
        public UserManager<IdentityUser> UserManager;
        public SignInManager<IdentityUser> SignInManager;
        private BabyTrackerContext context;
        public EditModel(UserManager<IdentityUser> userManger, BabyTrackerContext ctx, SignInManager<IdentityUser> signInManager)
        {
            UserManager = userManger;
            context = ctx;
            SignInManager = signInManager;
        }

        [BindProperty][Required]
        public string Id { get; set; }
        [BindProperty][Required]
        public string UserName { get; set; }
        [BindProperty][Required][EmailAddress]
        public string Email { get; set; }
        [BindProperty]
        public string Password { get; set; }
        public string Message {get; set;}
        public string ReturnPath {get; set;}
        public IEnumerable<Infant> Infants {get; set;}

        public async Task<IActionResult> OnGetAsync(string id)
        {
            if (!IsLoggedIn())
            {
                return RedirectToPage("/Account/Login");
            }
            if (IsUserOwner(id) || IsUserAdmin())
            {
                IdentityUser user = await UserManager.FindByIdAsync(id);
                Id = user.Id;
                UserName = user.UserName;
                Email = user.Email;
                Message = IsUserAdmin() ? $"Delete {UserName}'s account?": "Delete your account?";
                ReturnPath = IsUserAdmin() ? "/Users/List" : "/";
                return Page();
            }
            return RedirectToPage("/Error/Error404");
        }
        
        public async Task<IActionResult> OnPostAsync(string id)
        {
            if (!IsLoggedIn())
            {
                return RedirectToPage("/Account/Login");
            }
            if (IsUserOwner(Id) || IsUserAdmin())
            {
                IdentityUser user = await UserManager.FindByIdAsync(id);
                if (user != null)
                {
                    if(IsUserOwner(Id))
                    {
                         await SignInManager.SignOutAsync();
                    }
                    await UserManager.DeleteAsync(user);
                    foreach (Infant infant in context.Infants.Where(i => i.UserId == id))
                    {
                        context.Infants.Remove(infant);
                    }
                    context.SaveChanges();
                    return RedirectToPage(GetReturnUrl());
                }
                return RedirectToPage(GetReturnUrl());
            }
            return RedirectToPage("/Error/Error404");
        }
    }
}